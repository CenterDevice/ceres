= CEnteRdEvice Sre (ceres)
:toc: macro
Ceres the goddess of agriculture, grain crops, fertility and motherly relationships.

image:https://travis-ci.org/lukaspustina/ceres.svg?branch=master[link="https://travis-ci.org/lukaspustina/ceres"] image:https://codecov.io/gh/lukaspustina/ceres/branch/master/graph/badge.svg[link="https://codecov.io/gh/lukaspustina/ceres"] image:https://img.shields.io/github/release/lukaspustina/ceres.svg[link="https://github.com/lukaspustina/ceres/releases"] image:https://img.shields.io/crates/v/ceres.svg[link="https://crates.io/crates/ceres"] image:https://img.shields.io/badge/license-MIT-blue.svg?label=License[link="./LICENSE]

toc::[]

== Installation

=== Ubuntu [x86_64]

Please add my PackageCloud open source repository and install `ceres` via apt.

[source,bash]
----
curl -s https://packagecloud.io/install/repositories/lukaspustina/opensource/script.deb.sh | sudo bash
sudo apt-get install ceres
----

=== Linux Binaries [x86_64]

There are binaries available at the https://github.com/lukaspustina/ceres/releases[GitHub release] page. The binaries are compiled on Ubuntu.

=== macOS Binaries [x86_64]

There are binaries available at the https://github.com/lukaspustina/ceres/releases[GitHub release] page.

=== Brew

First, install https://www.rustup.rs[Rustup] to install a Rust compiler.

==== Latest Release

`brew install lukaspustina/os/ceres`

==== HEAD

`brew install lukaspustina/os/ceres --HEAD`

=== Cargo

First, install https://www.rustup.rs[Rustup] to install a Rust compiler.

`cargo install ceres --git https://github.com/lukaspustina/ceres`

=== From Source

First, install https://www.rustup.rs[Rustup] to install a Rust compiler.

[source,bash]
----
git clone https://github.com/lukaspustina/ceres
cd ceres
cargo install
----


== Configuration

`ceres` requires a configuration file in order to load profiles. By default, `ceres` tries to read `~/.ceres.conf`. See this link:examples/ceres.conf[example] for an example configuration.


== Use Cases

=== Consul

[source,bash]
----
ceres --config ~/.ceres.conf --profile staging@cd consul list -o [humon|json|plain] --output-options=MetaData:ec2_instance_id --service mongo-config,mongo --tags centerdevice
----

=== Instances

==== List AWS EC2 instances

[source,bash]
----
ceres --config ~/.ceres.conf --profile staging@cd instances list -o [humon|json] --output-options=InstanceId,Tags=Name:AnsibleHostGroup,State --filter 'Instance=i-.*,Tags=Name:AnsibleHostGroup=batch_.*,State=stopped'
----

==== Run Remote Command

The difference of this command compared to <<ssh>> command is that this command logs all output to separate files instead of printing to all output to the console.

[source,bash]
----
ceres --config ~/.ceres.conf --profile staging@cd instances run --show-all --public-ip ssh-opt="-t" --no-progress-bar i-123456789 i-987654321 -- ls /
----

==== Ssh to AWS EC2 instances

===== Open interactive shell

[source,bash]
----
ceres --config ~/.ceres.conf --profile staging@cd instances ssh --public-ip --ssh-opt="-t" i-123456789
----

===== Run command on instance
[[ssh]]

[source,bash]
----
ceres --config ~/.ceres.conf --profile staging@cd instances ssh i-123456789 -- ls /
----

==== Terminate AWS EC2 instances

[source,bash]
----
ceres --config ~/.ceres.conf --profile staging@cd instances terminate -o [humon|json] i-123456789 i-123456798
----

== Ops

=== Create Ops Issue

[source,bash]
----
ceres --config ~/.ceres.conf --profile staging@cd ops issues create --interactive --template ops_issue.md --filename ops_issue.md --label aws,cluster_b --show-in-browser -t "This is an issue"
----

=== Open Ops Issues in Webbrowser

[source,bash]
----
ceres --config ~/.ceres.conf --profile staging@cd ops issues browse [--project]
----

== Todos

* [ ] Add reason field to ModuleFailed error.
* [ ] Move logic out of Modules into testable modules, e.g., ops issues create.

